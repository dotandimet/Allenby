Perl was the duct tape of the web
browser and server talk in HTTP - stateless, text based protocol over TCP/IP
browser renders text (HTML) into page/form UI
HTML: text that defines pages, links, forms
===
Request / Response
===
CGI - single process eats (input), shoots (output) and leaves (exit)
===
write your own
CGI::Application
CGI::Prototype
no, seroiusly, write your own
===
mod_perl - interpreter lives in browser, program hangs around
Mason
Maypole
Catalyst
Jifty
===
web app - 
State Transitions
Rendering a page from Data
===
Maypole
Class::DBI
Template::Toolkit
mod_perl
===
Catalyst
yes, but
insanely modular.
===
Mojolicious
Don't tell me how to model my data
Help me do the 
===
Dispatching:
===
Square: myapp.cgi?foo=baz&bar=42
Cool: /myapp/bar/42
===
# myapp.cgi
use CGI;
my $req = CGI->new;
if ($req->param('foo') eq 'baz') {
    my ($id) = $req->param('bar');
    doBaz($id);
}
elsif ($req->param('foo') eq 'burt') {
...
===
My first vim power tip: %
(bracket bouncing through the spaghetti code)
===
Rendering:



