[{"notes":"","text":"# Mojolicious\n## Duct Tape for the HTML5 Web\n\nDotan Dimet \n\n`dotan@corky.net`\n`dotan@evogene.com`","label":""},{"notes":"","text":"# Duct Tape\n* The Internet is a series of tubes\n* ... stuck together with perl\n![](\/maruitzio-cattelan-duct-tape.jpg)","label":""},{"notes":"","text":"* browser and server talk in HTTP\n* browser renders text (HTML) into page\/form UI","label":""},{"notes":"","text":"### HTTP\n\n* TCP\/IP\n* Text-based\n* Stateless\n* Connect, Request, Response, Close\n* Request is one of GET, POST (PUT, DELETE).\n* Your script eats (input) shoots (output) and leaves (exit)","label":""},{"notes":"","text":"### HTML\n\n* links, forms\n* images, tables\n* it's all text\n* a page is a collection of links\n\n#### HTML 4\n\n* Javascript  DOM  CSS  XMLHTTPRequest (AJAX)\n\n#### HTML 5\n\n* New form elements, CSS transitions and animations\n* Canvas! SVG! Video! Audio! Offline!\n* Websockets! (\\*)","label":""},{"notes":"","text":"### Perl Has the Tools\n* CGI \n* LWP (web client)\n### But they are old and crufty","label":""},{"notes":"","text":"### Mojolicious\n\n* A web application framework\n* Created by Sebastian Reidel (He did it before)\n* No dependencies beyond core modules\n* Easy to install and to port\n* Potentially targeting PHP developers and Perl6","label":""},{"notes":"","text":"* built on top of Mojo\n* Mojo includes all the goodies needed to build a web framework\n* such as an async HTTP 1.1 compliant stack \n* RFC driven development\n* Test driven development\n* Its own web server, client, cookies, url objects, file handling...","label":""},{"notes":"","text":"* The framework takes away the hard and boring parts of the task\n* What's the difference between a framework and a library?","label":""},{"notes":"","text":"### A framework provides _structure_\n* external structure - the API or UI I expose to the world\n* Internal structure - how I structure my code","label":""},{"notes":"","text":"### External Structure - the URL\n\n#### Square:\n\n    myapp.cgi?foo=baz&bar=42\n\nSame as \n\n    myapp.cgi?bar=42&foo=baz\n\n#### Cool:\n\n    \/myapp\/bar\/42\n\nDistinct from\n\n    \/myapp\/42\/bar","label":""},{"notes":"","text":"Sample Mojolicious(::Lite) app\n\n    mojo generate lite_app myapp\n\n    #!\/usr\/bin\/env perl\n    \n    use Mojolicious::Lite;\n   \n    get '\/' => 'index';\n    \n    get '\/:groovy' => sub {\n        my $self = shift;\n        $self->render(text => $self->param('groovy'), layout => 'funky');\n    };\n    \n    app->start;\n    __DATA__\n    \n    @@ index.html.ep\n    % layout 'funky';\n    Yea baby!\n    \n    @@ layouts\/funky.html.ep\n    <!doctype html><html>\n        <head><title>Funky!<\/title><\/head>\n        <body><%== content %><\/body>\n    <\/html>","label":""},{"notes":"","text":"Sample Mojolicious(::Lite) app\n\n* Has 2 entry points:\n* GET `\/`\n* GET `\/anythingelse`\n* Default action: render a template (output a page)\n* Call render() explicitly to render something else\n* `'\/:groovy'` => a capture; anything except \/ or . and is available as a param and in the stash (global hash).","label":""},{"notes":"","text":"### Dispatching and Routes\n* Dispatching = what code to run when.\n* Mojolicious dispatches via **routes**\n* What to do when a given URL is asked for.\n* Usually the answer is: run this method (_action_) of that class\n* (_controller_) and render this template.","label":""},{"notes":"","text":"### Routes\nDefault route for a mojolicious (not lite) application:\n    sub startup {\n     my $self = shift;\n \n     # Routes\n     my $r = $self->routes;\n\n     # Default route\n     $r->route('\/:controller\/:action\/:id')->to('example#welcome', id => 1);\n    }\n`example#welcome` is short for:\n    ->to(controller => 'example', action => 'welcome');\n\nCould well be the only route you need.","label":""},{"notes":"","text":"### DIY Routes\n\nYou can explicitly set all your routes:\n\n    $r->route('\/slide\/')->to('slide#sorter')->name('sorter');\n\n    $r->route('\/slide\/reorder')->via('post')->to('slide#reorder')->name('reorder');\n    $r->route('\/slide\/add')->to('slide#edit');\n    $r->route('\/slide\/save')->to('slide#save')->name('save');\n\n    $r->route('\/')->to(cb => sub { shift->redirect_to('sorter'); });","label":""},{"notes":"","text":"### Waypoints\nThe action specified by a route is referred to as an endpoint.\nYou can also set up branching routes using `waypoint`.\n\n     my $rs = $r->waypoint('\/slide\/:id', id => qr\/(\\d+)\/)\n               ->to(controller => 'slide', action => 'show')\n               ->name('show');\n    $rs->route('\/edit')->to(action => 'edit')->name('edit');\n    $rs->route('\/copy')->to(action => 'copy')->name('copy');\n    $rs->route('\/cut')->to(action => 'cut')->name('cut');\n\nThese match \n\n   \/slide\/3      : controller => slide, action => show, id => 3\n   \/slide\/3\/edit : controller => slide, action => edit, id => 3\n   \/slide\/3\/copy : controller => slide, action => copy, id => 3\n\nThere are also bridges - code that will execute (and which must return true)\nbefore dispatching further (useful for authentication).","label":""},{"notes":"","text":"I'll talk about rendering and templates in a bit, but first\n\n    $self->render(...)\n\nWho is this `$self` you refer to?","label":""},{"notes":"","text":"* A Mojolicious application has a single **application** class, a subclass of `Mojolicious`\n* Mojolicious::Lite helpfully lets you access it through the `app()` function it imports.\n\n    app->start(); # formerly, this was called shagadelic...\n\n* A Mojolicious application can have many **controller** classes\n* which are all subclasses of `Mojolicious::Controller`.\n* The `$self` in `$self->render(...)` is a Mojolicious::Controller.","label":""},{"notes":"","text":"","label":""},{"notes":"","text":"# Controller stuff:\n* Mojo::Transaction object containing Request and Response objects - representing the message received and the message being sent in response:\n\n    my $params = $self->tx->req->params->to_hash;\n    # can also do $self->req->... directly\n\n* Stash object - global hash, used to pass values to templates\n\n    my $arg = $self->stash('foo');\n    $self->stash('color' => 'green');","label":""},{"notes":"","text":"param() method - shortcut to get params\n# Template Rendering\n\nTemplate is either named explicitly in the route, or explicitly passed as a\nparameter to the render() call, or is derived from controller and action\nnames.\n\nFormat is either argument or in file name","label":""},{"notes":"","text":"Dispatching:","label":""},{"notes":"","text":"\/\/ myapp.cgi\n    use CGI;\n    my $req = CGI->new;\n    if ($req->param('foo') eq 'baz') {\n        my ($id) = $req->param('bar');\n        doBaz($id);\n    }\n    elsif ($req->param('foo') eq 'burt') {\n    ...","label":""},{"notes":"","text":"My first vim power tip: %\n(bracket bouncing through the spaghetti code)","label":""},{"notes":"","text":"Rendering:","label":""},{"notes":"","text":"Mojolicious\nNew Web Framework from Sebastian Reidel\n* Sebastian was the chief maintainer of Maypole (Class::DBI+Template-Toolkit+mod_perl)\n* Wanted to make radical changes\n* => Got booted\n* Started [Catalyst](http:\/\/www.catalystframework.org\/)\n* Wanted to make radical changes\n* => Got booted\n* Went to work on other things\nworked with [Ruby on Rails](http:\/\/rubyonrails.org)\n* => Brought back Mojolicious","label":""},{"notes":"","text":"Originally called Mojo\nMojo is the foundation of Mojolicious\nMojo is a complete HTTP 1.1 Implementation\nRFC driven development\nTest driven development","label":""},{"notes":"","text":"Mojolicious is super focused\nWhat it is concerned with is what to do when a given URL is asked for\nUsually the answer is: run this method of that class and render this template.","label":""},{"notes":"","text":"Dotan Dimet\n\nדותן דימט\n\nProgramming Perl for 10 years\n\n*Christ. That's long.*","label":""},{"notes":"","text":"Caveats","label":""},{"notes":"","text":"![Romantically Apocalyptic](\/blastwave1.jpg)\n\n\n\n[yko: *Sometimes sri reminds me captain from Romantically Apocalyptic*](http:\/\/irclog.perlgeek.de\/mojo\/2010-07-14#i_2552055)","label":""},{"notes":"","text":"![part 2](\/blastwave2.jpg)","label":""},{"notes":"","text":"","label":""}]